@inherits UmbracoViewPage
@using Umbraco.Cms.Core.Models;

@{
    var homePage = Umbraco.AssignedContentItem.AncestorOrSelf<HomePage>();
    var navigationItems = homePage?.MainNavigation;
    var languages = homePage?.MainLanguages;
    var currentCulture = System.Globalization.CultureInfo.CurrentCulture.Name.Substring(0, 2);
}

<header class="header">
    <nav class="nav container">
        <div class="nav__data">
            <a href="@homePage.Url()" class="nav__logo">
                <span class="nav__logo--icon"></span>
                <span class="nav__logo--text">Design &amp; Contracting</span>
            </a>
            <div class="nav__toggle" id="nav-toggle">
                <i class="ri-menu-line nav__burger"></i>
                <i class="ri-close-line nav__close"></i>
            </div>
        </div>


        <div class="nav__menu" id="nav-menu">
            <ul class="nav__list">
                @if (navigationItems != null && navigationItems.Any())
                {
                    foreach (var item in navigationItems)
                    {
                        var content = item.Content;
                        var title = content.Value("title");
                        var linkObject = content.Value("Link");
                        var link = linkObject as Umbraco.Cms.Core.Models.Link;
                        var url = string.Empty;
                        var subLinks = content.Value("subLinks");
                        if (link != null)
                        {
                            url = link.Url;
                        }

                        if (subLinks != null)
                        {
                            var links = subLinks as IEnumerable<Umbraco.Cms.Core.Models.Link>;
                            if (links != null && links.Any())
                            {
                                <li class="dropdown__item">
                                    <div class="nav__link">
                                        @title <i class="ri-arrow-down-s-line dropdown__arrow"></i>
                                    </div>

                                    <ul class="dropdown__menu">
                                        @foreach (var subLink in links)
                                        {
                                            <li>
                                                <a class="dropdown__link" href="@subLink.Url" target="@subLink.Target">@subLink.Name</a>
                                            </li>
                                        }
                                    </ul>
                                </li>
                            }
                            else
                            {
                                <li><a class="nav__link" href="@url">@title</a></li>
                            }
                        }
                    }
                }
                <div class="languages-selector-mobile__line"></div>
            <div id="language-selector-mobile" class="languages-selector-mobile">
                @if (languages != null && languages.Any())
                {
                    var isSpanDisplayed = false;

                    foreach (var language in languages)
                    {
                        var content = language.Content;
                        var languageTitle = content.Value("language");
                        var linkObjectList = content.Value("Link") as List<Umbraco.Cms.Core.Models.Link>;
                        var url = string.Empty;
                        var iconeType = content.Value("Icon") as Umbraco.Cms.Core.Models.MediaWithCrops;
                        var selectedUrl = string.Empty;

                        if (linkObjectList != null && linkObjectList.Count > 0)
                        {
                            var firstLink = linkObjectList[0];
                            url = firstLink.Url;
                            selectedUrl = url?.Trim('/');
                            var languageLinkId = $"language-{Guid.NewGuid()}";
                            @if (iconeType != null && selectedUrl == currentCulture)
                            {
                                <div class="languages-selector-mobile__image-container">
                                    <img src="@iconeType.GetCropUrl()" />
                                </div>
                            }
                            <a id="@languageLinkId" class="language" href="#" data-language-url="@url">@languageTitle</a>
                            @if (!isSpanDisplayed)
                            {
                                isSpanDisplayed = true;
                                <span class="languages-selector-mobile--span">/</span>
                            }
                        }
                    }
                }
            </div>
            </ul>
        </div>

        <div id="language-selector" class="languages-selector">
            @if (languages != null && languages.Any())
            {
                var isSpanDisplayed = false;

                foreach (var language in languages)
                {
                    var content = language.Content;
                    var languageTitle = content.Value("language");
                    var linkObjectList = content.Value("Link") as List<Umbraco.Cms.Core.Models.Link>;
                    var url = string.Empty;
                    var iconeType = content.Value("Icon") as Umbraco.Cms.Core.Models.MediaWithCrops;
                    var selectedUrl = string.Empty;

                    if (linkObjectList != null && linkObjectList.Count > 0)
                    {
                        var firstLink = linkObjectList[0];
                        url = firstLink.Url;
                        selectedUrl = url?.Trim('/');
                        var languageLinkId = $"language-{Guid.NewGuid()}";
                        @if (iconeType != null && selectedUrl == currentCulture)
                        {
                            <div class="languages-selector__image-container">
                                <img src="@iconeType.GetCropUrl()" />
                            </div>
                        }
                        <a id="@languageLinkId" class="language" href="#" data-language-url="@url">@languageTitle</a>
                        @if (!isSpanDisplayed)
                        {
                            isSpanDisplayed = true;
                            <span class="languages-selector--span">/</span>
                        }
                    }
                }
            }
        </div>
    </nav>
</header>


<script>
    const showMenu = (toggleId, navId) => {
        const toggle = document.getElementById(toggleId),
            nav = document.getElementById(navId)

        toggle.addEventListener('click', () => {
            nav.classList.toggle('show-menu')

            toggle.classList.toggle('show-icon')
        })
    }

    showMenu('nav-toggle', 'nav-menu')

    //Changing the language
    document.querySelectorAll('.language').forEach(link => {
        link.addEventListener('click', function (event) {
            event.preventDefault();
            let languageUrl = link.getAttribute('data-language-url');
            let currentPageUrl = window.location.href;

            // Remove trailing slash from languageUrl if present
            languageUrl = languageUrl.replace(/^\/|\/$/g, '');

            // Extract the current language segment from the URL
            let currentLanguageSegment = currentPageUrl.match(/\/(en|ar)\//);
            if (currentLanguageSegment) {
                // Replace the current language segment with the selected language
                let newUrl = currentPageUrl.replace(currentLanguageSegment[0], "/" + languageUrl + "/");
                window.location.href = newUrl;
            } else {
                // If the URL doesn't contain a language segment, prepend it to the domain
                let domain = window.location.origin.replace(/\/$/, ''); // Remove trailing slash from the domain
                let currentPagePath = currentPageUrl.replace(domain, '').replace(/(^\w+:|^)\/\//, ''); // Remove domain from the current URL
                let newUrl = domain + "/" + languageUrl + "/" + currentPagePath;
                window.location.href = newUrl;
            }
        });
    });
</script>